#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <syslog.h>
#include <signal.h>
#include <fcntl.h>

#define PORT 9000
#define BUFFER_SIZE 1024
#define FILE_PATH "/var/tmp/aesdsocketdata"

int server_socket;
int client_socket;

void handle_signal(int signo) {
    syslog(LOG_INFO, "Caught signal, exiting");
    close(server_socket);
    remove(FILE_PATH);
    exit(0);
}

void run_server(int daemon_mode) {
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);
    char buffer[BUFFER_SIZE];
    int file_fd;

    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        syslog(LOG_ERR, "Failed to create socket");
        exit(EXIT_FAILURE);
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        syslog(LOG_ERR, "Bind failed");
        exit(EXIT_FAILURE);
    }

    if (listen(server_socket, 10) == -1) {
        syslog(LOG_ERR, "Listen failed");
        exit(EXIT_FAILURE);
    }

    if (daemon_mode) {
        if (daemon(0, 0) == -1) {
            syslog(LOG_ERR, "Failed to daemonize");
            exit(EXIT_FAILURE);
        }
    }

    while (1) {
        client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_len);
        if (client_socket == -1) {
            syslog(LOG_ERR, "Accept failed");
            continue;
        }
        syslog(LOG_INFO, "Accepted connection from %s", inet_ntoa(client_addr.sin_addr));

        file_fd = open(FILE_PATH, O_CREAT | O_APPEND | O_RDWR, 0644);
        if (file_fd == -1) {
            syslog(LOG_ERR, "Failed to open file");
            close(client_socket);
            continue;
        }

        ssize_t bytes_read;
        while ((bytes_read = recv(client_socket, buffer, BUFFER_SIZE, 0)) > 0) {
            write(file_fd, buffer, bytes_read);
            send(client_socket, buffer, bytes_read, 0);
        }

        close(file_fd);
        syslog(LOG_INFO, "Closed connection from %s", inet_ntoa(client_addr.sin_addr));
        close(client_socket);
    }
}

int main(int argc, char *argv[]) {
    openlog("aesdsocket", LOG_PID, LOG_DAEMON);
    signal(SIGINT, handle_signal);
    signal(SIGTERM, handle_signal);

    int daemon_mode = (argc > 1 && strcmp(argv[1], "-d") == 0);
    run_server(daemon_mode);
    closelog();
    return 0;
}
